// Generated by gencpp from file wam_msgs/RTJointTraj.msg
// DO NOT EDIT!


#ifndef WAM_MSGS_MESSAGE_RTJOINTTRAJ_H
#define WAM_MSGS_MESSAGE_RTJOINTTRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wam_msgs
{
template <class ContainerAllocator>
struct RTJointTraj_
{
  typedef RTJointTraj_<ContainerAllocator> Type;

  RTJointTraj_()
    : j1()
    , j2()
    , j3()
    , j4()
    , j5()
    , j6()
    , j7()
    , TS()
    , size(0.0)
    , Hz(0.0)  {
    }
  RTJointTraj_(const ContainerAllocator& _alloc)
    : j1(_alloc)
    , j2(_alloc)
    , j3(_alloc)
    , j4(_alloc)
    , j5(_alloc)
    , j6(_alloc)
    , j7(_alloc)
    , TS(_alloc)
    , size(0.0)
    , Hz(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _j1_type;
  _j1_type j1;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _j2_type;
  _j2_type j2;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _j3_type;
  _j3_type j3;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _j4_type;
  _j4_type j4;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _j5_type;
  _j5_type j5;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _j6_type;
  _j6_type j6;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _j7_type;
  _j7_type j7;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _TS_type;
  _TS_type TS;

   typedef float _size_type;
  _size_type size;

   typedef float _Hz_type;
  _Hz_type Hz;




  typedef boost::shared_ptr< ::wam_msgs::RTJointTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wam_msgs::RTJointTraj_<ContainerAllocator> const> ConstPtr;

}; // struct RTJointTraj_

typedef ::wam_msgs::RTJointTraj_<std::allocator<void> > RTJointTraj;

typedef boost::shared_ptr< ::wam_msgs::RTJointTraj > RTJointTrajPtr;
typedef boost::shared_ptr< ::wam_msgs::RTJointTraj const> RTJointTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wam_msgs::RTJointTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wam_msgs::RTJointTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wam_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'wam_msgs': ['/home/marcus/catkin_ws_WAM/src/wam_common/wam_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wam_msgs::RTJointTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wam_msgs::RTJointTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_msgs::RTJointTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wam_msgs::RTJointTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_msgs::RTJointTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wam_msgs::RTJointTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wam_msgs::RTJointTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d001d5f47cc80ced0a3567ce63fc2683";
  }

  static const char* value(const ::wam_msgs::RTJointTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd001d5f47cc80cedULL;
  static const uint64_t static_value2 = 0x0a3567ce63fc2683ULL;
};

template<class ContainerAllocator>
struct DataType< ::wam_msgs::RTJointTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wam_msgs/RTJointTraj";
  }

  static const char* value(const ::wam_msgs::RTJointTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wam_msgs::RTJointTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] j1\n\
float64[] j2\n\
float64[] j3\n\
float64[] j4\n\
float64[] j5\n\
float64[] j6\n\
float64[] j7\n\
float64[] TS\n\
float32 size\n\
float32 Hz\n\
";
  }

  static const char* value(const ::wam_msgs::RTJointTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wam_msgs::RTJointTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.j1);
      stream.next(m.j2);
      stream.next(m.j3);
      stream.next(m.j4);
      stream.next(m.j5);
      stream.next(m.j6);
      stream.next(m.j7);
      stream.next(m.TS);
      stream.next(m.size);
      stream.next(m.Hz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RTJointTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wam_msgs::RTJointTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wam_msgs::RTJointTraj_<ContainerAllocator>& v)
  {
    s << indent << "j1[]" << std::endl;
    for (size_t i = 0; i < v.j1.size(); ++i)
    {
      s << indent << "  j1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.j1[i]);
    }
    s << indent << "j2[]" << std::endl;
    for (size_t i = 0; i < v.j2.size(); ++i)
    {
      s << indent << "  j2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.j2[i]);
    }
    s << indent << "j3[]" << std::endl;
    for (size_t i = 0; i < v.j3.size(); ++i)
    {
      s << indent << "  j3[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.j3[i]);
    }
    s << indent << "j4[]" << std::endl;
    for (size_t i = 0; i < v.j4.size(); ++i)
    {
      s << indent << "  j4[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.j4[i]);
    }
    s << indent << "j5[]" << std::endl;
    for (size_t i = 0; i < v.j5.size(); ++i)
    {
      s << indent << "  j5[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.j5[i]);
    }
    s << indent << "j6[]" << std::endl;
    for (size_t i = 0; i < v.j6.size(); ++i)
    {
      s << indent << "  j6[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.j6[i]);
    }
    s << indent << "j7[]" << std::endl;
    for (size_t i = 0; i < v.j7.size(); ++i)
    {
      s << indent << "  j7[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.j7[i]);
    }
    s << indent << "TS[]" << std::endl;
    for (size_t i = 0; i < v.TS.size(); ++i)
    {
      s << indent << "  TS[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.TS[i]);
    }
    s << indent << "size: ";
    Printer<float>::stream(s, indent + "  ", v.size);
    s << indent << "Hz: ";
    Printer<float>::stream(s, indent + "  ", v.Hz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAM_MSGS_MESSAGE_RTJOINTTRAJ_H
