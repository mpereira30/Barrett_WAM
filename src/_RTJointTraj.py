# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wam_msgs/RTJointTraj.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RTJointTraj(genpy.Message):
  _md5sum = "d001d5f47cc80ced0a3567ce63fc2683"
  _type = "wam_msgs/RTJointTraj"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64[] j1
float64[] j2
float64[] j3
float64[] j4
float64[] j5
float64[] j6
float64[] j7
float64[] TS
float32 size
float32 Hz
"""
  __slots__ = ['j1','j2','j3','j4','j5','j6','j7','TS','size','Hz']
  _slot_types = ['float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       j1,j2,j3,j4,j5,j6,j7,TS,size,Hz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RTJointTraj, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.j1 is None:
        self.j1 = []
      if self.j2 is None:
        self.j2 = []
      if self.j3 is None:
        self.j3 = []
      if self.j4 is None:
        self.j4 = []
      if self.j5 is None:
        self.j5 = []
      if self.j6 is None:
        self.j6 = []
      if self.j7 is None:
        self.j7 = []
      if self.TS is None:
        self.TS = []
      if self.size is None:
        self.size = 0.
      if self.Hz is None:
        self.Hz = 0.
    else:
      self.j1 = []
      self.j2 = []
      self.j3 = []
      self.j4 = []
      self.j5 = []
      self.j6 = []
      self.j7 = []
      self.TS = []
      self.size = 0.
      self.Hz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.j1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.j1))
      length = len(self.j2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.j2))
      length = len(self.j3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.j3))
      length = len(self.j4)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.j4))
      length = len(self.j5)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.j5))
      length = len(self.j6)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.j6))
      length = len(self.j7)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.j7))
      length = len(self.TS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.TS))
      _x = self
      buff.write(_struct_2f.pack(_x.size, _x.Hz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j3 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j4 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j5 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j6 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j7 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.TS = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.size, _x.Hz,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.j1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.j1.tostring())
      length = len(self.j2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.j2.tostring())
      length = len(self.j3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.j3.tostring())
      length = len(self.j4)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.j4.tostring())
      length = len(self.j5)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.j5.tostring())
      length = len(self.j6)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.j6.tostring())
      length = len(self.j7)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.j7.tostring())
      length = len(self.TS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.TS.tostring())
      _x = self
      buff.write(_struct_2f.pack(_x.size, _x.Hz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j3 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j4 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j5 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j6 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.j7 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.TS = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.size, _x.Hz,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
